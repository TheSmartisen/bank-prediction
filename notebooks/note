import pandas as pd
from sklearn.preprocessing import LabelEncoder, OrdinalEncoder
import pickle

# Exemple de données
data = {
    "Gender": ["Male", "Female", "Male", "Female"],
    "Education": ["Graduate", "Not Graduate", "Graduate", "Graduate"],
    "Loan_Status": ["Y", "N", "Y", "N"],
    "Property_Area": ["Urban", "Rural", "Urban", "Semiurban"]
}

df = pd.DataFrame(data)

# Configurer les encodages
encoders_config = {}
encoded_df = df.copy()

# Exemple d'encodage mixte
for col in df.columns:
    if col == "Gender":
        # LabelEncoder
        le = LabelEncoder()
        encoded_df[col] = le.fit_transform(df[col])
        encoders_config[col] = {"type": "LabelEncoder", "encoder": le}
    elif col == "Education":
        # Mapping manuel
        mapping = {"Graduate": 0, "Not Graduate": 1}
        encoded_df[col] = df[col].map(mapping)
        encoders_config[col] = {"type": "map", "mapping": mapping}
    elif col == "Loan_Status":
        # OrdinalEncoder
        oe = OrdinalEncoder(categories=[["N", "Y"]])  # Ordre défini
        encoded_df[col] = oe.fit_transform(df[[col]])
        encoders_config[col] = {"type": "OrdinalEncoder", "encoder": oe}
    elif col == "Property_Area":
        # One-Hot Encoding
        dummies = pd.get_dummies(df[col], prefix=col)
        encoded_df = pd.concat([encoded_df, dummies], axis=1).drop(columns=[col])
        encoders_config[col] = {"type": "get_dummies", "columns": dummies.columns.tolist()}

# Sauvegarde des configurations avec pickle
with open("encoders_config.pkl", "wb") as file:
    pickle.dump(encoders_config, file)

import pandas as pd

# Charger les configurations depuis le fichier pickle
with open("encoders_config.pkl", "rb") as file:
    encoders_config = pickle.load(file)

# Nouvelles données
new_data = {
    "Gender": ["Female", "Male", "Male"],
    "Education": ["Not Graduate", "Graduate", "Graduate"],
    "Loan_Status": ["Y", "N", "Y"],
    "Property_Area": ["Urban", "Rural", "Semiurban"]
}
new_df = pd.DataFrame(new_data)

# Appliquer les encodages à chaque colonne en fonction du type
for col, config in encoders_config.items():
    if config["type"] == "LabelEncoder":
        # Utiliser l'objet LabelEncoder chargé
        le = config["encoder"]
        new_df[col] = le.transform(new_df[col])
    elif config["type"] == "map":
        # Appliquer le mapping manuel
        mapping = config["mapping"]
        new_df[col] = new_df[col].map(mapping)
    elif config["type"] == "OrdinalEncoder":
        # Utiliser l'OrdinalEncoder chargé
        oe = config["encoder"]
        new_df[col] = oe.transform(new_df[[col]])
    elif config["type"] == "get_dummies":
        # One-Hot Encoding : Ajouter les colonnes nécessaires
        for dummy_col in config["columns"]:
            category = dummy_col.split("_")[-1]
            new_df[dummy_col] = (new_df[col] == category).astype(int)
        new_df.drop(columns=[col], inplace=True)

# Résultat transformé
print(new_df)